{"version":3,"file":"background.js","sources":["webpack://Voxi/./src/background/index.js"],"sourcesContent":["chrome.runtime.onInstalled.addListener(() => {\r\n    console.log(\"installed\")\r\n\r\n    chrome.storage.sync.set({ lascommand: \"down\" })\r\n    chrome.storage.sync.set({ mode: \"command\" })\r\n    chrome.storage.sync.set({ writeTarget: 0 })\r\n    chrome.storage.sync.set({ started: false })\r\n})\r\n\r\nchrome.tabs.onActivated.addListener(({ tabId }) => {\r\n    console.log('Message sended to #' + tabId)\r\n    chrome.tabs.sendMessage(\r\n        tabId,\r\n        \"focused\",\r\n        null\r\n    )\r\n})\r\n\r\nchrome.runtime.onMessage.addListener(async (message) => {\r\n    console.log(\"message\", message)\r\n    if (message.includes('tab')) {\r\n        const current = await chrome.tabs.query({ active: true, currentWindow: true })\r\n        const allTabs = await chrome.tabs.query({ groupId: current[0].groupId })\r\n        const allTabsIds = allTabs.map(item => item.id)\r\n        const currentTabIndex = allTabsIds.indexOf(current[0].id)\r\n        if (message.includes('next')) {\r\n            console.log(\"next\")\r\n            if (currentTabIndex !== -1) {\r\n                if (currentTabIndex + 1 <= allTabsIds.length - 1) {\r\n                    chrome.tabs.update(allTabsIds[currentTabIndex + 1], { selected: true })\r\n                } else {\r\n                    chrome.tabs.update(allTabsIds[0], { selected: true })\r\n                }\r\n            }\r\n        }\r\n        if (message.includes('prev')) {\r\n            if (currentTabIndex !== -1) {\r\n                if (currentTabIndex - 1 >= 0) {\r\n                    chrome.tabs.update(allTabsIds[currentTabIndex - 1], { selected: true })\r\n                } else {\r\n                    chrome.tabs.update(allTabsIds[allTabsIds.length - 1], { selected: true })\r\n                }\r\n            }\r\n        }\r\n    }\r\n})"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A","sourceRoot":""}